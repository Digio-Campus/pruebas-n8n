{
  "createdAt": "2025-07-29T10:15:57.573Z",
  "updatedAt": "2025-07-29T10:17:07.000Z",
  "id": "CvOK0QUMpeNo9fcg",
  "name": "ExtraerFacturas1",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "get",
        "messageId": "={{ $json.id }}",
        "simple": false,
        "options": {
          "dataPropertyAttachmentsPrefixName": "attachment_",
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1888,
        112
      ],
      "id": "c4eb57b5-4478-4d45-8282-3fdd612dd1f9",
      "name": "Get a message",
      "webhookId": "eee13013-3cee-4aa9-82e2-9016516068b4"
    },
    {
      "parameters": {
        "jsCode": "// https://community.n8n.io/t/iterating-over-email-attachments/13588/3\nlet results = [];\n\nfor (const item of $input.all()) {\n  console.log(item);\n  for (const key of Object.keys(item.binary)) {\n    results.push({\n        json: {fileName : item.binary[key].fileName },\n        binary: {\n            data: item.binary[key],\n        }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "f602f9bd-2f15-4e17-85c9-3a5d0034d580",
      "name": "Iterate over email attachments",
      "type": "n8n-nodes-base.code",
      "position": [
        -1664,
        112
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "2f49fd16-501d-4134-814d-28339649637e",
      "name": "Read PDF email attachments",
      "type": "n8n-nodes-base.readPDF",
      "position": [
        -992,
        -160
      ],
      "notesInFlow": false,
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $binary.data.fileExtension }}",
              "value2": "pdf"
            }
          ]
        }
      },
      "id": "553b5cf8-18b7-49ce-a0f6-8f97a67c4fe2",
      "name": "Is attachment a PDF?",
      "type": "n8n-nodes-base.if",
      "position": [
        -1216,
        112
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "44c7b8fb-54b7-4208-a0ea-af174d2afd5c",
              "leftValue": "={{$json.fileName}}",
              "rightValue": "factura",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -1440,
        112
      ],
      "id": "c47ab929-ddf4-44f9-9cc7-fc7a8351e399",
      "name": "Filtrar por nombre"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -672,
        64
      ],
      "id": "9898701a-24bf-4991-8d5f-18c69d5c0e52",
      "name": "Google Gemini Chat Model"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyHour"
            }
          ]
        },
        "filters": {
          "q": "has:attachment"
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -2112,
        112
      ],
      "id": "90b40d6c-a297-4afd-bb8a-3d8e854ed833",
      "name": "Gmail Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const jsonMatch =  item.json.output.match(/```json\\n([\\s\\S]*?)\\n```/);\n  let jsonString = jsonMatch ? jsonMatch[1] : item.json.output;\n  // Limpia cualquier carácter extra\n  jsonString = jsonString.trim();\n\n  item.json = JSON.parse(jsonString);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        -160
      ],
      "id": "91b96775-99ab-4f4c-b2a9-b2a298a56042",
      "name": "Sacar el JSON de la respuesta"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2d6d6187-27a0-4430-999f-5e863bdb48a5",
              "leftValue": "={{ $json.observaciones_IA.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -144,
        -160
      ],
      "id": "aff0c602-3f21-4cd8-96b2-4facda7c99f6",
      "name": "Has any errors?"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1200,
        144
      ],
      "id": "f6e9f523-1802-4909-895e-f60061ef5b80",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1904,
        160
      ],
      "id": "16f28523-f7e1-4f30-a0e8-8efbe841f092",
      "name": "Google Gemini Chat Model1"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $binary.data.fileExtension }}",
              "value2": "csv"
            }
          ]
        }
      },
      "id": "298f90e9-b37d-4b53-84da-7741ec5b52b7",
      "name": "Is attachment a CSV?",
      "type": "n8n-nodes-base.if",
      "position": [
        976,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": []
        },
        "includeOtherFields": true,
        "include": "except",
        "excludeFields": "observaciones_IA, data",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1424,
        -160
      ],
      "id": "6e8f8817-3723-4369-b832-bc75d566c514",
      "name": "Eliminar observaciones IA"
    },
    {
      "parameters": {},
      "id": "a593e80c-b396-43e9-9148-5b83d5384c71",
      "name": "Neither PDF or CSV",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1200,
        336
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A continuación te paso una factura en texto plano sacada de un pdf, sin formato. Devuélveme un JSON estructurado con los campos detectados, incluyendo conceptos, totales, datos del cliente y emisor si están presentes:\n\nEste es el nombre del pdf:\n```\n{{ $binary.data.fileName }}\n```\n\nEste es el contenido del pdf:\n```\n{{ $json.text }}\n```",
        "options": {
          "systemMessage": "=Actúa como un asistente experto en extracción de datos estructurados a partir de facturas en texto plano. Tu tarea es convertir textos sin formato en un objeto JSON con la estructura exacta que se indica a continuación, manteniendo los nombres de los campos tal como están escritos:\n\n```json\n{\n  \"numero_factura\": \"\",\n  \"fecha\" : \"\",\n  \"empresa\": {\n    \"nombre\": \"\",\n    \"direccion\": \"\",\n    \"mail\": \"\",\n    \"telefono\": \"\",\n    \"cif\": \"\",\n    \"fax\": \"\",\n    \"web\": \"\"\n  },\n  \"cliente\": {\n    \"nombre\": \"\",\n    \"direccion\": \"\",\n    \"mail\": \"\",\n    \"telefono\": \"\"\n  },\n  \"conceptos\": [\n    {\n      \"descripcion\": \"\",\n      \"cantidad\": \"\",\n      \"precio\": \"\",\n      \"total_linea\": \"\"\n    }\n  ],\n  \"totales\": {\n    \"subtotal\": \"\",\n    \"impuestos\": [\n      {\n        \"porcentaje\": \"\",\n        \"cantidad\": \"\"\n      }\n    ],\n    \"total\": \"\"\n  },\n  \"forma_pago\": \"\",\n  \"notas_factura\": \"\",\n  \"observaciones_IA\": []\n}\n```\n\nReglas importantes:\nSi no hay información disponible para algún campo, debes dejarlo como una cadena vacía (\"\"), nunca omitirlo.\n\nExtrae todos los conceptos si están disponibles, y colócalos en la lista conceptos.\n\nSi detectas impuestos (como IVA o IRPF), inclúyelos en la lista totales.impuestos con su porcentaje y cantidad.\n\nTodos los formatos númericos deben ir sin su unidad, por ejemplo 100€ a 100 o 7% a 7.\n\nLa fecha, si esta, conviertela a formato dateTime. \n\nEn observaciones_IA, escribe cualquier duda, incoherencia, posible error o ambigüedad detectada (por ejemplo: totales que no cuadran, fechas dudosas, campos duplicados, etc.).\n\nNo inventes valores. Extrae sólo lo que esté presente de forma explícita.\n\nEl JSON debe estar bien indentado y ser válido."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -768,
        -160
      ],
      "id": "2ef097f0-360f-4356-b604-1152268beb88",
      "name": "PDF to JSON Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A continuación te paso un JSON que representa una factura, junto con la estructura relacional a la que debe insertarse. Devuélveme un script SQL, usando CTEs (`WITH ...`) para hacer todas las inserciones en una sola operación.\n\n### Estructura de tablas:\n\n- `empresa(id, nombre, direccion, mail, telefono, cif, fax, web)`\n- `cliente(id, nombre, direccion, mail, telefono)`\n- `factura(id, numero_factura, fecha, empresa_id, cliente_id, forma_pago, notas_factura)`\n- `concepto(id, factura_id, descripcion, cantidad, precio, total_linea)`\n- `impuesto(id, factura_id, porcentaje, cantidad)`\n- `resumen(factura_id, subtotal, total)`\n\n### JSON de entrada:\n{{$json.toJsonString()}}\n",
        "options": {
          "systemMessage": "=Eres un asistente experto en bases de datos PostgreSQL y Supabase. Dado un JSON que representa una factura, tu tarea es generar un script SQL completo que inserte todos los datos en una base de datos PostgreSQL previamente creada, siguiendo una estructura relacional normalizada y llamar a la herramienta \"postgres\" para ejecutarla.\n\nEl script debe:\n- Usar `WITH` para insertar empresa, cliente, factura, conceptos, impuestos y resumen en una única transacción SQL.\n- Ser compatible con Supabase (PostgreSQL puro).\n- Asegurar claves foráneas y relaciones entre tablas correctamente.\n- Usar `RETURNING id` para recuperar claves y pasarlas entre pasos.\n- Devolver al final `SELECT 'Todo insertado correctamente';` como mensaje.\n\nNo inventes datos, trabaja solamente con los datos que recibes del usuario, si no tienes datos suficientes para hacer la consulta, devuelve un error no un script con datos generados.\n\nNo generes las definiciones de tablas. Asume que ya existen y están normalizadas, y que se crearon usando el siguiente script:\n\n```sql \n-- Tabla empresa\nCREATE TABLE empresa (\n  id SERIAL PRIMARY KEY,\n  nombre TEXT NOT NULL,\n  direccion TEXT,\n  mail TEXT,\n  telefono TEXT,\n  cif TEXT UNIQUE,\n  fax TEXT,\n  web TEXT\n);\n\n-- Tabla cliente\nCREATE TABLE cliente (\n  id SERIAL PRIMARY KEY,\n  nombre TEXT NOT NULL,\n  direccion TEXT,\n  mail TEXT UNIQUE,\n  telefono TEXT\n);\n\n-- Tabla factura\nCREATE TABLE factura (\n  id SERIAL PRIMARY KEY,\n  numero_factura TEXT UNIQUE NOT NULL,\n  fecha DATE NOT NULL,\n  empresa_id INTEGER REFERENCES empresa(id) ON DELETE SET NULL,\n  cliente_id INTEGER REFERENCES cliente(id) ON DELETE SET NULL,\n  forma_pago TEXT,\n  notas_factura TEXT\n);\n\n-- Tabla concepto (líneas de factura)\nCREATE TABLE concepto (\n  id SERIAL PRIMARY KEY,\n  factura_id INTEGER REFERENCES factura(id) ON DELETE CASCADE,\n  descripcion TEXT NOT NULL,\n  cantidad NUMERIC(10, 2) NOT NULL,\n  precio NUMERIC(10, 2) NOT NULL,\n  total_linea NUMERIC(10, 2) NOT NULL\n);\n\n-- Tabla impuesto (totales por tipo de impuesto en la factura)\nCREATE TABLE impuesto (\n  id SERIAL PRIMARY KEY,\n  factura_id INTEGER REFERENCES factura(id) ON DELETE CASCADE,\n  porcentaje NUMERIC(5, 2) NOT NULL,\n  cantidad NUMERIC(10, 2) NOT NULL\n);\n\n-- Tabla resumen (totales de la factura)\nCREATE TABLE resumen (\n  factura_id INTEGER PRIMARY KEY REFERENCES factura(id) ON DELETE CASCADE,\n  subtotal NUMERIC(10, 2) NOT NULL,\n  total NUMERIC(10, 2) NOT NULL\n);\n```\n\nUn ejemplo de JSON y su script sql asociado seria el siguiente\n\n```json\n{\n  \"numero_factura\": \"F-001\",\n  \"fecha\": \"2025-07-18\",\n  \"empresa\": {\n    \"nombre\": \"TechCorp S.A.\",\n    \"direccion\": \"Calle Falsa 123, Madrid\",\n    \"mail\": \"info@techcorp.com\",\n    \"telefono\": \"911234567\",\n    \"cif\": \"B12345678\",\n    \"fax\": \"911234568\",\n    \"web\": \"https://techcorp.com\"\n  },\n  \"cliente\": {\n    \"nombre\": \"Juan Pérez\",\n    \"direccion\": \"Av. Siempre Viva 742, Sevilla\",\n    \"mail\": \"juan.perez@example.com\",\n    \"telefono\": \"655443322\"\n  },\n  \"conceptos\": [\n    {\n      \"descripcion\": \"Diseño web\",\n      \"cantidad\": 1,\n      \"precio\": 1000.00,\n      \"total_linea\": 1000.00\n    },\n    {\n      \"descripcion\": \"Mantenimiento mensual\",\n      \"cantidad\": 2,\n      \"precio\": 150.00,\n      \"total_linea\": 300.00\n    }\n  ],\n  \"totales\": {\n    \"subtotal\": 1300.00,\n    \"impuestos\": [\n      {\n        \"porcentaje\": 21.00,\n        \"cantidad\": 273.00\n      }\n    ],\n    \"total\": 1573.00\n  },\n  \"forma_pago\": \"Transferencia bancaria\",\n  \"notas_factura\": \"Gracias por su confianza.\"\n}\n```\n\n```sql\n-- Empresa: insertar solo si no existe (por CIF)\nWITH nueva_empresa AS (\n  INSERT INTO empresa (nombre, direccion, mail, telefono, cif, fax, web)\n  VALUES (\n    'TechCorp S.A.', 'Calle Falsa 123, Madrid', 'info@techcorp.com',\n    '911234567', 'B12345678', '911234568', 'https://techcorp.com'\n  )\n  ON CONFLICT (cif) DO UPDATE\n    SET nombre = EXCLUDED.nombre\n  RETURNING id\n),\nempresa_existente AS (\n  SELECT id FROM empresa WHERE cif = 'B12345678'\n),\nempresa_final AS (\n  SELECT id FROM nueva_empresa\n  UNION\n  SELECT id FROM empresa_existente\n),\n\n-- Cliente: insertar solo si no existe (por mail)\nnuevo_cliente AS (\n  INSERT INTO cliente (nombre, direccion, mail, telefono)\n  VALUES (\n    'Juan Pérez', 'Av. Siempre Viva 742, Sevilla',\n    'juan.perez@example.com', '655443322'\n  )\n  ON CONFLICT (mail) DO UPDATE\n    SET nombre = EXCLUDED.nombre\n  RETURNING id\n),\ncliente_existente AS (\n  SELECT id FROM cliente WHERE mail = 'juan.perez@example.com'\n),\ncliente_final AS (\n  SELECT id FROM nuevo_cliente\n  UNION\n  SELECT id FROM cliente_existente\n),\n\n-- Factura\nnueva_factura AS (\n  INSERT INTO factura (numero_factura, fecha, empresa_id, cliente_id, forma_pago, notas_factura)\n  SELECT\n    'F-001', '2025-07-18',\n    empresa_final.id, cliente_final.id,\n    'Transferencia bancaria', 'Gracias por su confianza.'\n  FROM empresa_final, cliente_final\n  RETURNING id\n),\n\n-- Conceptos\ninsert_conceptos AS (\n  INSERT INTO concepto (factura_id, descripcion, cantidad, precio, total_linea)\n  SELECT id, 'Diseño web', 1, 1000.00, 1000.00 FROM nueva_factura\n  UNION ALL\n  SELECT id, 'Mantenimiento mensual', 2, 150.00, 300.00 FROM nueva_factura\n),\n\n-- Impuestos\ninsert_impuestos AS (\n  INSERT INTO impuesto (factura_id, porcentaje, cantidad)\n  SELECT id, 21.00, 273.00 FROM nueva_factura\n),\n\n-- Resumen\ninsert_resumen AS (\n  INSERT INTO resumen (factura_id, subtotal, total)\n  SELECT id, 1300.00, 1573.00 FROM nueva_factura\n)\n\nSELECT 'Todo insertado correctamente';\n\n```\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1872,
        -64
      ],
      "id": "2d98d025-d2f6-47d2-b374-a53d54055249",
      "name": "JSON to SQL Agent"
    },
    {
      "parameters": {
        "jsCode": "const facturasMap = {};\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  const numFactura = data.numero_factura;\n\n  if (!facturasMap[numFactura]) {\n    //Creas la estructura y datos generales\n    facturasMap[numFactura] = {\n      numero_factura: data.numero_factura,\n      fecha: data.fecha,\n      empresa: {\n        nombre: data.empresa_nombre || \"\",\n        direccion: data.empresa_direccion || \"\",\n        mail: data.empresa_mail || \"\",\n        telefono: data.empresa_telefono || \"\",\n        cif: data.empresa_cif || \"\",\n        fax: data.empresa_fax || \"\",\n        web: data.empresa_web || \"\"\n      },\n      cliente: {\n        nombre: data.cliente_nombre || \"\",\n        direccion: data.cliente_direccion || \"\",\n        mail: data.cliente_mail || \"\",\n        telefono: data.cliente_telefono || \"\"\n      },\n      conceptos: [],\n      totales: {\n        subtotal: data.subtotal || \"\",\n        impuestos: [], \n        total: data.total || \"\"\n      },\n      forma_pago: data.forma_pago || \"\",\n      notas_factura: data.notas_factura || \"\"\n    };\n  }\n\n  // Agregar línea de concepto\n  facturasMap[numFactura].conceptos.push({\n    descripcion: data.concepto_descripcion || \"\",\n    cantidad: data.concepto_cantidad || \"\",\n    precio: data.concepto_precio || \"\",\n    total_linea: data.concepto_total_linea || \"\"\n  });\n\n  const impuestos = [];\n\n  for (const key in data) {\n    if (key.startsWith('impuesto_porcentaje')) {\n      const sufijo = key.replace('impuesto_porcentaje_', '');\n      const porcentaje = data[key];\n      const cantidad = data[`impuesto_cantidad_${sufijo}`] || 0;\n      const nombre = sufijo.toUpperCase(); // o sacarlo de otro campo si lo tienes\n      impuestos.push({\n        nombre,\n        porcentaje,\n        cantidad\n      });\n    }\n}\n\nfacturasMap[numFactura].totales.impuestos = impuestos;\n\n}\n\n// Convertimos a array de facturas\nconst facturas = Object.values(facturasMap);\n\n// Devolver como salida de items de n8n\nreturn facturas.map(factura => ({ json: factura }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1424,
        144
      ],
      "id": "9eadf4e2-1a7a-4ae9-bbbc-e858a676f5b4",
      "name": "Agrupar facturas"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{$fromAI('query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2032,
        160
      ],
      "id": "dc1939ea-cc90-4f9c-83af-3ae828d8b02f",
      "name": "Execute a SQL query in Postgres"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1648,
        -64
      ],
      "id": "6403b666-83be-465e-a684-905dfb653dea",
      "name": "Merge PDF and CSV"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1200,
        -160
      ],
      "id": "1d0ba20b-04d5-4901-adba-b3b4e86f844d",
      "name": "Merge Errors"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2d6d6187-27a0-4430-999f-5e863bdb48a5",
              "leftValue": "={{ $json.respuesta }}",
              "rightValue": "=Continue with errors",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        976,
        -240
      ],
      "id": "d6d2871d-bd47-45d5-b024-901309806a75",
      "name": "Approved?"
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "numero_factura",
              "field2": "numero_factura"
            }
          ]
        },
        "options": {}
      },
      "id": "b59c691c-7679-4232-b24e-69f47615eb7f",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        752,
        -240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "javilujan97@gmail.com",
        "subject": "Facturas con errores ",
        "message": "={{ $json.mensaje }}",
        "responseType": "customForm",
        "defineForm": "json",
        "jsonOutput": "={{ $json.formulario.toJsonString() }}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        304,
        -304
      ],
      "id": "5f2ecc15-0cae-470f-8c79-5a02f5040df2",
      "name": "Wait for approval",
      "webhookId": "4127ebbb-105f-45b0-a53f-3d28e6162c1e"
    },
    {
      "parameters": {
        "jsCode": "// Agrupar todos los items y crear un solo item con un mensaje HTML\nlet items = $input.all();\n\nlet mensajeHTML = `<p>Se han detectado los siguientes errores:</p><ul>`;\nlet formulario = [];\n\nfor (const item of items) {\n  const observaciones = item.json.observaciones_IA.map(obs => `<li>${obs}</li>`).join(\"\");\n  mensajeHTML += `\n    <li>\n      <strong>ID:</strong> ${item.json.numero_factura}<br>\n      <strong>Errores:</strong>\n      <ul>${observaciones}</ul>\n    </li>`;\n\n  formulario.push({\n    \"fieldLabel\" : `¿Procesar factura ${item.json.numero_factura}?`,\n    \"fieldType\": \"dropdown\",\n\t\t\"fieldOptions\": {\n\t\t\t\"values\": [\n\t\t\t\t{\n\t\t\t\t\t\"option\": \"Continue with errors\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"option\": \"Don't continue\"\n\t\t\t\t}\n\t\t\t]\n        },\n    \"requiredField\": true\n  });\n}\n\n\nmensajeHTML += `</ul><p>¿Deseas procesarlos igualmente?</p>`;\n\nreturn [\n  {\n    json: {\n      mensaje: mensajeHTML,\n      formulario: formulario,\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -304
      ],
      "id": "7546d9bd-d261-45a4-b860-39369f038e6e",
      "name": "Create Message & Form"
    },
    {
      "parameters": {
        "jsCode": "const respuestas = $input.first().json.data ;\nconst salida = [];\n\nfor (const key in respuestas) {\n  const match = key.match(/factura (\\d+)/i);\n  if (match) {\n    salida.push({\n      json: {\n        numero_factura: match[1],\n        respuesta: respuestas[key]\n      }\n    });\n  }\n}\n\nreturn salida;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        -304
      ],
      "id": "a1551a62-df88-48ee-a08e-5e2acf2d0335",
      "name": "Parse Form"
    }
  ],
  "connections": {
    "Get a message": {
      "main": [
        [
          {
            "node": "Iterate over email attachments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Iterate over email attachments": {
      "main": [
        [
          {
            "node": "Filtrar por nombre",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is attachment a PDF?": {
      "main": [
        [
          {
            "node": "Read PDF email attachments",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Is attachment a CSV?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtrar por nombre": {
      "main": [
        [
          {
            "node": "Is attachment a PDF?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF email attachments": {
      "main": [
        [
          {
            "node": "PDF to JSON Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "PDF to JSON Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Get a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sacar el JSON de la respuesta": {
      "main": [
        [
          {
            "node": "Has any errors?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has any errors?": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "Create Message & Form",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Errors",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Agrupar facturas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "JSON to SQL Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Is attachment a CSV?": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Neither PDF or CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Eliminar observaciones IA": {
      "main": [
        [
          {
            "node": "Merge PDF and CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF to JSON Agent": {
      "main": [
        [
          {
            "node": "Sacar el JSON de la respuesta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query in Postgres": {
      "ai_tool": [
        [
          {
            "node": "JSON to SQL Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Agrupar facturas": {
      "main": [
        [
          {
            "node": "Merge PDF and CSV",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge PDF and CSV": {
      "main": [
        [
          {
            "node": "JSON to SQL Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Errors": {
      "main": [
        [
          {
            "node": "Eliminar observaciones IA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Approved?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Approved?": {
      "main": [
        [
          {
            "node": "Merge Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for approval": {
      "main": [
        [
          {
            "node": "Parse Form",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Message & Form": {
      "main": [
        [
          {
            "node": "Wait for approval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Form": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "PDF to JSON Agent": [
      {
        "json": {
          "output": "```json\n{\n  \"numero_factura\": \"\",\n  \"fecha\": \"2023-08-15\",\n  \"empresa\": {\n    \"nombre\": \"Borcelle\",\n    \"direccion\": \"Calle Cualquiera 123, Cualquier Lugar\",\n    \"mail\": \"Hola@unsitiogenial.es\",\n    \"telefono\": \"911-234-5678\",\n    \"cif\": \"\",\n    \"fax\": \"\",\n    \"web\": \"\"\n  },\n  \"cliente\": {\n    \"nombre\": \"Sandra Haro\",\n    \"direccion\": \"Calle Cualquiera 123, Cualquier Lugar\",\n    \"mail\": \"Hola@unsitiogenial.es\",\n    \"telefono\": \"911-234-5678\"\n  },\n  \"conceptos\": [\n    {\n      \"descripcion\": \"Diseño web\",\n      \"cantidad\": \"1\",\n      \"precio\": \"100\",\n      \"total_linea\": \"100\"\n    },\n    {\n      \"descripcion\": \"Publicidad\",\n      \"cantidad\": \"1\",\n      \"precio\": \"100\",\n      \"total_linea\": \"100\"\n    },\n    {\n      \"descripcion\": \"Marketing\",\n      \"cantidad\": \"1\",\n      \"precio\": \"100\",\n      \"total_linea\": \"100\"\n    },\n    {\n      \"descripcion\": \"Asistencia web\",\n      \"cantidad\": \"1\",\n      \"precio\": \"100\",\n      \"total_linea\": \"100\"\n    }\n  ],\n  \"totales\": {\n    \"subtotal\": \"500\",\n    \"impuestos\": [\n      {\n        \"porcentaje\": \"21\",\n        \"cantidad\": \"105\"\n      },\n      {\n        \"porcentaje\": \"7\",\n        \"cantidad\": \"35\"\n      }\n    ],\n    \"total\": \"500\"\n  },\n  \"forma_pago\": \"Transferencia\",\n  \"notas_factura\": \"El servicio tiene una validez de 30 días.\",\n  \"observaciones_IA\": [\n    \"La suma de los totales de línea de los conceptos (400) no coincide con el subtotal indicado (500).\",\n    \"El cálculo del total (Subtotal 500 + IVA 105 - IRPF 35 = 570) no coincide con el total indicado (500).\",\n    \"Los datos de contacto (dirección, mail, teléfono) de la empresa 'Borcelle' son idénticos a los datos de contacto del cliente 'Sandra Haro', lo cual es inusual.\",\n    \"El nombre 'Rosa María Aguado' aparece al final del texto sin un contexto claro o relación con los campos de la factura.\"\n  ]\n}\n```"
        }
      },
      {
        "json": {
          "output": "```json\n{\n  \"numero_factura\": \"98765\",\n  \"fecha\": \"2012-11-24T00:00:00\",\n  \"empresa\": {\n    \"nombre\": \"DISTRIBUCIONES FICTICIAS DE PRUEBA\",\n    \"direccion\": \"Calle y número de mi empresa\\nMI LOCALIDAD\\n99999 MI PROVINCIA\",\n    \"mail\": \"mi_email@mailserver.com\",\n    \"telefono\": \"999-99.99.99\",\n    \"cif\": \"X0000000T\",\n    \"fax\": \"999-88.88.88\",\n    \"web\": \"www.mipaginaweb.com\"\n  },\n  \"cliente\": {\n    \"nombre\": \"PRUEBASED GARCIA PROBERO\",\n    \"direccion\": \"CL GRAN VIA 5 -Dirección Fiscal\\nPALMA DE MALLORCA\\n07610 BALEARES\",\n    \"mail\": \"\",\n    \"telefono\": \"\"\n  },\n  \"conceptos\": [\n    {\n      \"descripcion\": \"ARTICULO ESPECÍFICO CON EL NOMBRE QUE SEA\",\n      \"cantidad\": \"1.5\",\n      \"precio\": \"600.00\",\n      \"total_linea\": \"900.00\"\n    },\n    {\n      \"descripcion\": \"OTRO ARTICULO, AQUÍ PONDRÁ SU DESCRIPCION\",\n      \"cantidad\": \"12.0\",\n      \"precio\": \"10.50\",\n      \"total_linea\": \"126.00\"\n    }\n  ],\n  \"totales\": {\n    \"subtotal\": \"1026.00\",\n    \"impuestos\": [\n      {\n        \"porcentaje\": \"21\",\n        \"cantidad\": \"215.46\"\n      }\n    ],\n    \"total\": \"1241.46\"\n  },\n  \"forma_pago\": \"CONTADO\",\n  \"notas_factura\": \"Ponga aquí su inscripción en el Registro, u otros datos de interés para el cliente, horarios, incluso datos publicitarios como ofertas, etc.\",\n  \"observaciones_IA\": [\n    \"La factura contiene una tabla de desglose de IVA y RE (Recargo de Equivalencia), pero solo el IVA está claramente integrado y sumado en los totales principales de la factura. Los valores de RE no se han incluido en la sección de impuestos dado que no forman parte de la suma final de impuestos ni se presentan con una 'cantidad' total explícita en el desglose final.\"\n  ]\n}\n```"
        }
      },
      {
        "json": {
          "output": "```json\n{\n  \"numero_factura\": \"\",\n  \"fecha\": \"2030-08-15\",\n  \"empresa\": {\n    \"nombre\": \"BORCELLE\",\n    \"direccion\": \"Calle Cualquiera 123, Cualquier Lugar\",\n    \"mail\": \"Hola@unsitiogenial.es\",\n    \"telefono\": \"911-234-5678\",\n    \"cif\": \"\",\n    \"fax\": \"\",\n    \"web\": \"\"\n  },\n  \"cliente\": {\n    \"nombre\": \"Belén Castillo\",\n    \"direccion\": \"Calle Cualquiera 123, Cualquier Lugar\",\n    \"mail\": \"Hola@unsitiogenial.es\",\n    \"telefono\": \"911-234-5678\"\n  },\n  \"conceptos\": [\n    {\n      \"descripcion\": \"Diseño web\",\n      \"cantidad\": \"1\",\n      \"precio\": \"100\",\n      \"total_linea\": \"100\"\n    },\n    {\n      \"descripcion\": \"Publicidad\",\n      \"cantidad\": \"1\",\n      \"precio\": \"100\",\n      \"total_linea\": \"100\"\n    },\n    {\n      \"descripcion\": \"Marketing\",\n      \"cantidad\": \"1\",\n      \"precio\": \"100\",\n      \"total_linea\": \"100\"\n    },\n    {\n      \"descripcion\": \"Asistencia web\",\n      \"cantidad\": \"1\",\n      \"precio\": \"100\",\n      \"total_linea\": \"100\"\n    }\n  ],\n  \"totales\": {\n    \"subtotal\": \"500\",\n    \"impuestos\": [\n      {\n        \"porcentaje\": \"21\",\n        \"cantidad\": \"105\"\n      },\n      {\n        \"porcentaje\": \"7\",\n        \"cantidad\": \"35\"\n      }\n    ],\n    \"total\": \"500\"\n  },\n  \"forma_pago\": \"Transferencia\",\n  \"notas_factura\": \"El servicio tiene una validez de 30 días.\",\n  \"observaciones_IA\": [\n    \"El subtotal de 500€ declarado no coincide con la suma de los totales de línea de los conceptos (400€).\",\n    \"El total de la factura (500€) no concuerda con el cálculo del subtotal más/menos impuestos (500€ subtotal + 105€ IVA - 35€ IRPF = 570€).\",\n    \"El nombre 'Cristina Gallego' aparece en el texto sin una asignación clara (cliente, empresa, contacto).\"\n  ]\n}\n```"
        }
      }
    ],
    "Sacar el JSON de la respuesta": [
      {
        "json": {
          "numero_factura": "1",
          "fecha": "2023-08-15",
          "empresa": {
            "nombre": "Borcelle",
            "direccion": "Calle Cualquiera 123, Cualquier Lugar",
            "mail": "Hola@unsitiogenial.es",
            "telefono": "911-234-5678",
            "cif": "",
            "fax": "",
            "web": ""
          },
          "cliente": {
            "nombre": "Sandra Haro",
            "direccion": "Calle Cualquiera 123, Cualquier Lugar",
            "mail": "Hola@unsitiogenial.es",
            "telefono": "911-234-5678"
          },
          "conceptos": [
            {
              "descripcion": "Diseño web",
              "cantidad": "1",
              "precio": "100",
              "total_linea": "100"
            },
            {
              "descripcion": "Publicidad",
              "cantidad": "1",
              "precio": "100",
              "total_linea": "100"
            },
            {
              "descripcion": "Marketing",
              "cantidad": "1",
              "precio": "100",
              "total_linea": "100"
            },
            {
              "descripcion": "Asistencia web",
              "cantidad": "1",
              "precio": "100",
              "total_linea": "100"
            }
          ],
          "totales": {
            "subtotal": "500",
            "impuestos": [
              {
                "porcentaje": "21",
                "cantidad": "105"
              },
              {
                "porcentaje": "7",
                "cantidad": "35"
              }
            ],
            "total": "500"
          },
          "forma_pago": "Transferencia",
          "notas_factura": "El servicio tiene una validez de 30 días.",
          "observaciones_IA": [
            "La suma de los totales de línea de los conceptos (400) no coincide con el subtotal indicado (500).",
            "El cálculo del total (Subtotal 500 + IVA 105 - IRPF 35 = 570) no coincide con el total indicado (500).",
            "Los datos de contacto (dirección, mail, teléfono) de la empresa 'Borcelle' son idénticos a los datos de contacto del cliente 'Sandra Haro', lo cual es inusual.",
            "El nombre 'Rosa María Aguado' aparece al final del texto sin un contexto claro o relación con los campos de la factura."
          ]
        }
      },
      {
        "json": {
          "numero_factura": "98765",
          "fecha": "2012-11-24T00:00:00",
          "empresa": {
            "nombre": "DISTRIBUCIONES FICTICIAS DE PRUEBA",
            "direccion": "Calle y número de mi empresa\nMI LOCALIDAD\n99999 MI PROVINCIA",
            "mail": "mi_email@mailserver.com",
            "telefono": "999-99.99.99",
            "cif": "X0000000T",
            "fax": "999-88.88.88",
            "web": "www.mipaginaweb.com"
          },
          "cliente": {
            "nombre": "PRUEBASED GARCIA PROBERO",
            "direccion": "CL GRAN VIA 5 -Dirección Fiscal\nPALMA DE MALLORCA\n07610 BALEARES",
            "mail": "",
            "telefono": ""
          },
          "conceptos": [
            {
              "descripcion": "ARTICULO ESPECÍFICO CON EL NOMBRE QUE SEA",
              "cantidad": "1.5",
              "precio": "600.00",
              "total_linea": "900.00"
            },
            {
              "descripcion": "OTRO ARTICULO, AQUÍ PONDRÁ SU DESCRIPCION",
              "cantidad": "12.0",
              "precio": "10.50",
              "total_linea": "126.00"
            }
          ],
          "totales": {
            "subtotal": "1026.00",
            "impuestos": [
              {
                "porcentaje": "21",
                "cantidad": "215.46"
              }
            ],
            "total": "1241.46"
          },
          "forma_pago": "CONTADO",
          "notas_factura": "Ponga aquí su inscripción en el Registro, u otros datos de interés para el cliente, horarios, incluso datos publicitarios como ofertas, etc.",
          "observaciones_IA": []
        }
      },
      {
        "json": {
          "numero_factura": "2",
          "fecha": "2030-08-15",
          "empresa": {
            "nombre": "BORCELLE",
            "direccion": "Calle Cualquiera 123, Cualquier Lugar",
            "mail": "Hola@unsitiogenial.es",
            "telefono": "911-234-5678",
            "cif": "",
            "fax": "",
            "web": ""
          },
          "cliente": {
            "nombre": "Belén Castillo",
            "direccion": "Calle Cualquiera 123, Cualquier Lugar",
            "mail": "Hola@unsitiogenial.es",
            "telefono": "911-234-5678"
          },
          "conceptos": [
            {
              "descripcion": "Diseño web",
              "cantidad": "1",
              "precio": "100",
              "total_linea": "100"
            },
            {
              "descripcion": "Publicidad",
              "cantidad": "1",
              "precio": "100",
              "total_linea": "100"
            },
            {
              "descripcion": "Marketing",
              "cantidad": "1",
              "precio": "100",
              "total_linea": "100"
            },
            {
              "descripcion": "Asistencia web",
              "cantidad": "1",
              "precio": "100",
              "total_linea": "100"
            }
          ],
          "totales": {
            "subtotal": "500",
            "impuestos": [
              {
                "porcentaje": "21",
                "cantidad": "105"
              },
              {
                "porcentaje": "7",
                "cantidad": "35"
              }
            ],
            "total": "500"
          },
          "forma_pago": "Transferencia",
          "notas_factura": "El servicio tiene una validez de 30 días.",
          "observaciones_IA": [
            "El subtotal de 500€ declarado no coincide con la suma de los totales de línea de los conceptos (400€).",
            "El total de la factura (500€) no concuerda con el cálculo del subtotal más/menos impuestos (500€ subtotal + 105€ IVA - 35€ IRPF = 570€).",
            "El nombre 'Cristina Gallego' aparece en el texto sin una asignación clara (cliente, empresa, contacto)."
          ]
        }
      }
    ],
    "Wait for approval": [
      {
        "json": {
          "data": {
            "¿Procesar factura 1?": "Continue with errors",
            "¿Procesar factura 2?": "Don't continue"
          }
        }
      }
    ]
  },
  "versionId": "257bb511-541b-418c-af24-9843e5423246",
  "triggerCount": 0,
  "tags": []
}